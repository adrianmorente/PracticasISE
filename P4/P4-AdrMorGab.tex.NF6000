\input{preambuloSimple.tex}

%----------------------------------------------------------------------------------------
%	TÍTULO Y DATOS DEL ALUMNO
%----------------------------------------------------------------------------------------

\title{
\normalfont \normalsize
\textsc{\textbf{Ingeniería de Servidores (2016-2017)} \\ Grado en Ingeniería Informática \\ Universidad de Granada} \\ [25pt] % Your university, school and/or department name(s)
\horrule{0.5pt} \\[0.4cm] % Thin top horizontal rule
\huge Memoria Práctica 4 \\ % The assignment title
\horrule{2pt} \\[0.5cm] % Thick bottom horizontal rule
}

\author{Adrián Morente Gabaldón} % Nombre y apellidos

\date{\normalsize\today} % Incluye la fecha actual

%----------------------------------------------------------------------------------------
% DOCUMENTO
%----------------------------------------------------------------------------------------

\begin{document}

\maketitle % Muestra el Título

\newpage %inserta un salto de página

\tableofcontents % para generar el índice de contenidos

\newpage

\listoffigures

\listoftables

\newpage


\section{Seleccione, instale y ejecute uno, comente los resultados. \textbf{Atención}: no es lo mismo un benchmark que una suite, instale un benchmark.}
Phoronix Suite se trata de una suite de benchmarks; esto es, un programa desde el cual podemos instalar muchos benchmarks variados en forma de módulos y ejecutarlos cómodamente contra nuestra máquina. En este caso, probaremos a instalar dicha herramienta en Ubuntu Server. Como dictan el PDF de la práctica y la guía de instalación de Phoronix, podemos instalarla mediante APT desde los repositorios oficiales de Ubuntu \cite{phoronix-install}. Ejecutaremos \textbf{\emph{sudo apt-get install phoronix-test-suite}} y esperaremos.

Una vez tengamos la herramienta instalada, podemos consultar tanto la guía oficial antes mencionada como su repositorio oficial de GitHub, ya que en ambos depositan información relevante y documentación para la instalación y el uso de Phoronix Test Suite. Para explorar los benchmarks que podemos instalar, tenemos las siguientes opciones:
\begin{itemize}
	\item Consultar las opciones disponibles en la web de \textbf{openbenchmarking.org}.
	\item Ejecutar el comando \textbf{phoronix-test-suite list-tests}. Con esto obtendremos una lista de todos los módulos disponibles, los cuales aportan un nombre descriptivo, el paquete que los contiene y el recurso del sistema que estresan:
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.6]{phoronix-modules}
		\caption{Pequeña parte de los benchmarks disponibles dentro de Phoronix-Test-Suite. - Adrián Morente Gabaldón [22/12/2016]}
		\label{figura15}
	\end{figure}
	Entre todos estos, encontramos módulos para estresar la CPU con algoritmos de compresión pesados o incluso juegos relativamente modernos y pesados. Por desgracia, para hacer pruebas con estos juegos habría que tenerlos adquiridos mediante la plataforma Steam. Además, dado que la máquina donde se está realizando esta práctica no dispone de unos recursos gráficos muy avanzados, probaremos con un benchmark destinado al testeo de la memoria RAM, como por ejemplo \textbf{pts/ramspeed}.
\end{itemize}

Una vez elegido el benchmark a instalar, lo integraremos en el sistema y lo ejecutaremos con los siguientes comandos en orden:
\begin{verbatim}
	sudo phoronix-test-suite install pts/ramspeed
	sudo phoronix-test-suite benchmark pts/ramspeed
\end{verbatim}
Acto seguido, el programa nos preguntará en qué condiciones queremos ejecutar el benchmark. Esto es, cuáles de las pruebas queremos realizar:
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.5]{phoronix-ramspeed}
	\caption{Opciones de ejecución del benchmark RAMspeed. - Adrián Morente Gabaldón [23/12/2016]}
	\label{figura16}
\end{figure}
Sin embargo, tras probar a ejecutar el benchmark con todas las opciones, estima un tiempo de 52 minutos hasta su completado, así que lo ejecutaremos con menos opciones. Debemos decir también que al ejecutar el benchmark, muestra en la terminal una información relativa al sistema con todo el hardware relevante (CPU, socket, memoria(s), gráficos, software, etc.) que no mostraremos debido a su extensión. Veamos ahora la ejecución de \emph{pts/ramspeed} para las opciones 1 en la primera opción y 2 en la segunda; es decir, prueba de copia de datos en coma flotante:
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.5]{ramspeed-trying}
	\caption{Ejecución del benchmark RAMspeed con copia de datos en coma flotante. - Adrián Morente Gabaldón [23/12/2016]}
	\label{figura17}
\end{figure}
Sin embargo, aquí en la terminal no obtenemos mucha información del programa, ya que solo nos muestra el rendimiento de copia de MiB por segundo (11947.37 en este caso); así que a la pregunta de si queremos visualizar los datos en el navegador, responderemos que sí. Esto nos mostrará los archivos generados (.xml) en la prueba en un formato más visual en Mozilla Firefox. Veremos por ejemplo esta descripción del sistema:
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.6]{phoronix-overview}
	\caption{Breve descripción del sistema desde el que se ejecuta Phoronix Test Suite. - Adrián Morente Gabaldón [23/12/2016]}
	\label{figura18}
\end{figure}
Para terminar, al final de la página se nos muestra una gráfica de barras insulsa situando el rendimiento obtenido en nuestra prueba, sin comparaciones ni más datos. Como valoración personal, el benchmark utilizado deja mucho que desear.


\section{De los parámetros que le podemos pasar al comando ¿Qué significa -c 5? ¿Y -n 100? Monitorice la ejecución de ab contra alguna máquina (cualquiera) ¿cuántas ``tareas'' crea ab en el cliente?}
Apache Benchmark es uno de los benchmarks para servidores web más populares. Se ejecuta con el comando \textit{ab}, y si probamos a hacerlo sin haberlo instalado antes, obtendremos la siguiente salida en la terminal:
\begin{figure}[H]
	\centering
	\includegraphics[scale=1]{ab-install}
	\caption{Ejecución fallida de ab seguida de su instalación. - Adrián Morente Gabaldón [22/12/2016]}
	\label{figura1}
\end{figure}
Esto nos indica que dicho programa no está instalado, y nos sugiere el nombre del paquete donde podemos encontrarlo. Acto seguido, vemos el comando para su instalación, que ejecutamos.
A continuación, podemos pasar a ejecutarlo con cualesquiera de sus opciones que deseemos, las cuales podemos consultar a través de su manual en la terminal, o en la propia documentación oficial de Apache \cite{ab-help}. Para este caso práctico, lo ejecutaremos de la forma \textbf{\textit{ab -c 5 -n 100}} pero antes, veamos que significan estas dos opciones:
\begin{figure}[H]
	\centering
	\includegraphics[scale=1]{ab-options}
	\caption{Parte de las opciones propuestas para la ejecución de ab. - Adrián Morente Gabaldón [22/12/2016]}
	\label{figura2}
\end{figure}
\begin{itemize}
	\item \textbf{-c 5}: \textit{``Number of multiple requests to make at a time''}; esto es, el número de hebras concurrentes que lanza el programa para los tests realizados. En este caso, veremos que lanza cinco hebras.
	\item \textbf{-n 10}: \textit{``Number of requests to perform''}; esto es, el número de consultas de prueba que realizará ab al servidor; (diez en este caso).
\end{itemize}
Pasemos ahora a ejecutar \textit{ab} contra la máquina de Ubuntu Server. Como vemos en el manual antes mencionado, se ejecuta con la siguiente estructura:
\begin{verbatim}
	ab [opciones] [http[s]://]hostname[:puerto]/ruta 
	POR EJEMPLO --> ab -c 5 -n 10 http://localhost/
\end{verbatim}
Aunque en el enunciado de la pregunta sugiere el uso de 5 hebras y 10 consultas, aumentaremos en gran medida este último número, ya que con solo 10 consultas el fin de la ejecución es inmediato; y lo que queremos realizar es una ejecución de larga duración para poder \textit{espiar} esta ejecución desde otra terminal con \textbf{htop} y así ver el número de tareas que crea ab. Realizaremos 500.000 consultas con 20 hebras a modo de ejemplo:
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.4]{ab-exec}
	\caption{Ejecución de ab contra Ubuntu Server y visualización de las tareas con htop. - Adrián Morente Gabaldón}
	\label{figura3}
\end{figure}
En la ventana de la izquierda, resaltado en azul podemos ver la(s) tarea(s) creadas por ab. Como vemos, tan solo crea \textbf{una} tarea real, ya que la concurrencia de las hebras que asignamos las ejecuta paralela o concurrentemente de forma interna en su propio código; pero no crea hebras realmente concurrentes ejecutadas directamente en el procesador.
Con htop podemos ver el descriptor de proceso, el porcentaje de CPU y el tiempo empleado hasta el momento. Finalmente, la ejecución de ab con dichas opciones terminó tal que así, con 72 segundos empleados:
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.4]{ab-ubuntu}
	\caption{Ejecución de ab contra Ubuntu Server para 20 hebras y 500.000 consultas. - Adrián Morente Gabaldón [22/12/2016]}
	\label{figura4}
\end{figure}


\section{Ejecute ab contra las tres máquinas virtuales (desde el SO anfitrión a las máquinas virtuales de la red local) una a una (arrancadas por separado). ¿Cuál es la que proporciona mejores resultados? Muestre y coméntelos. (Use como máquina de referencia Ubuntu Server para la comparativa).}
Para empezar, lo primero que haremos será buscar una forma de ejecutar \emph{ab} desde el sistema anfitrión, ya que en sistemas como Windows o OS X no viene pre-instalado. Para ello hay varias alternativas a través de las cuales podemos instalar Apache y algunas de sus utilidades en el sistema anfitrión (con Windows 10 en mi caso). Una buena alternativa es \textbf{XAMPP}, cuyo contenido es similar al ya conocido \emph{lamp-server\^} en Ubuntu Server, ya que incluye todas las utilidades para montar un servidor web rápida y cómodamente (Apache, MariaDB, PHP y Perl).

Para instalarlo, accederemos a su web oficial y lo descargaremos en su versión para Windows \cite{xampp-install}; la parte de instalación de éste la obviaremos ya que es tan simple como cualquier instalación en Windows. Una vez hecho esto, podremos ejecutar \emph{ab} en el anfitrión. Ahora deberemos arrancar una de las máquinas virtuales, testarla con \emph{ab}, recoger los resultados, apagar la máquina y repetir el proceso con la siguiente.

Cabe destacar que en aras de realizar un análisis en las mismas condiciones para todos los servidores, incluiremos la misma página web en todas las máquinas virtuales. En este caso, incluiré mi propia página web, desarrollada por medio de la tecnología \emph{Polymer} de Google \cite{polymer}. El código de dicha web está alojado en el repositorio \url{https://github.com/adrianmorente/adrianmorente.github.io}. 

Todo el código fuente lo incluiremos en el directorio \textbf{/var/www/html}, que como ya sabemos, es el directorio del que Apache2 toma el contenido web a ofrecer en el servidor. Para esto, instalaremos el cliente \emph{git} y clonaremos el contenido de dicho repositorio. Una vez hecho esto, reiniciaremos el servicio apache2 en cada una de las máquinas y procederemos a ejecutar \emph{ab} desde el sistema anfitrión.

	\subsection{AB contra Ubuntu Server}
	Con \emph{ifconfig} vemos rápidamente que la dirección IP de Ubuntu Server accesible para el sistema anfitrión (modo \emph{Bridge}) es 192.168.1.39. [He de mencionar que el nombre de la máquina ha cambiado de \emph{us14} a \emph{ubuntuserver}, como podemos apreciar al comparar con otras capturas de pantalla. Esto se debe a que tras problemas con la primera máquina virtual, tuve que instalar Ubuntu Server 14.04 de nuevo en una nueva máquina virtual, cometiendo el error de poner un nombre distinto al de la anterior.]
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.5]{ip-ubuntu}
		\caption{Dirección IP de Ubuntu Server en la interfaz de red modo Bridge. - Adrián Morente Gabaldón [23/12/2016]}
		\label{figura19}
	\end{figure}
	Acto seguido, lanzamos el programa XAMPP en la máquina anfitriona y clickamos en la opción \emph{``Shell''}, lo que nos desplegará una ventana de línea de comandos; en la cual podremos introducir el comando \emph{ab} con las opciones vistas en el ejercicio anterior. En este caso, lo realizaremos con 5 hebras y 200.000 peticiones. Obtenemos lo siguiente:
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.4]{xampp-ubuntu}
		\caption{Ejecución de AB contra Ubuntu Server desde el sistema anfitrión. - Adrián Morente Gabaldón [23/12/2016]}
		\label{figura20}
	\end{figure}

	\subsection{AB contra CentOS}
	Al igual que en Ubuntu, con \emph{ifconfig} averiguamos la dirección IP de CentOS (192.168.1.40), también conectada al anfitrión mediante el modo \emph{Bridge} de interfaz de red.
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.5]{ip-centos}
		\caption{Dirección IP de CentOS en la interfaz de red modo Bridge. - Adrián Morente Gabaldón [23/12/2016]}
		\label{figura21}
	\end{figure}
	Para tener acceso al servidor web de CentOS desde el sistema anfitrión, una vez que hayamos incluido todos los ficheros de modificación del \emph{index.html} ofrecido antes mencionado, necesitaremos habilitar el puerto 80 (HTTP) mediante \emph{firewall-cmd --add-port=80/tcp} como ya hicimos en prácticas anteriores. Hecho esto, reiniciaremos el servicio y podremos lanzar \emph{ab} desde la máquina anfitriona. Obviamente, para poder comparar, volveremos a ejecutarlo con 5 hebras y 200.000 peticiones:
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.4]{xampp-centos}
		\caption{Ejecución de AB contra CentOS desde el sistema anfitrión. - Adrián Morente Gabaldón [23/12/2016]}
		\label{figura22}
	\end{figure}

	\subsection{AB contra Windows Server}
	En este caso, obtenemos la dirección IP con el comando \emph{ipconfig}, que es 192.168.1.41, correspondiente a la interfaz de red modo \emph{Bridge} de VirtualBox.
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.5]{ip-windows}
		\caption{Dirección IP de Windows Server en la interfaz de red modo Bridge. - Adrián Morente Gabaldón [23/12/2016]}
		\label{figura23}
	\end{figure}
	Reiniciaremos el servicio desde el \emph{``Administrador del servidor''} que podemos lanzar desde el menú de Inicio, simplemente pulsando en el botón \emph{Reiniciar}; y volveremos a lanzar \emph{ab} desde el anfitrión con la nueva IP; para 5 hebras y 200.000 peticiones una vez más:
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.4]{xampp-windows}
		\caption{Ejecución de AB contra Windows Server desde el sistema anfitrión. - Adrián Morente Gabaldón [23/12/2016]}
		\label{figura24}
	\end{figure}

Para terminar, hagamos un balance de los resultados obtenidos. Como podemos ver, CentOS es \textbf{la máquina más rápida} en cuanto a atención y manejo de peticiones al servicio HTTP, con un tiempo total de 75 segundos para las condiciones dadas. Le sigue de cerca Ubuntu Server con 81 segundos empleados; y obtenemos el peor rendimiento por parte de Windows Server, habiendo empleado hasta 126 segundos para atender al mismo número de peticiones.
	

\section{Instale y siga el tutorial en \href{http://jmeter.apache.org/usermanual/build-web-test-plan.html}{http://jmeter.apache.org/usermanual/build-web-test-plan.html} realizando capturas de pantalla y comentándolas. En vez de usar la web de jmeter, haga el experimento usando sus máquinas virtuales ¿coincide con los resultados de ab?}
	\subsection{Instalación de JMeter}
	Para la realización del tutorial, utilizaremos otra vez Ubuntu Server, ya que es más ilustrativo y familiar el proceso de instalación y actualización de paquetes. Empezaremos instalando JMeter según dictan en su web oficial \cite{jmeter-install}, que puede ser de varias formas, como veremos a continuación:
	\begin{itemize}
		\item Mediante el clonado y compilado del código fuente a través de \emph{Git/GitHub}.
		\item Mediante la descarga del código fuente más reciente en formato \emph{tar.gz} y posterior compilado del mismo.
		\item Mediante la descarga y ejecución de los binarios ya pre-compilados; que será la opción que elegiremos en este caso.
		\item Mediante la descarga e instalación desde los repositorios oficiales de Ubuntu.
	\end{itemize}
	En este caso práctico, optaremos por la última alternativa, ya que como sabemos, la instalación a través de terminal desde repositorios instala las dependencias necesarias y nos mantiene al tanto de las actualizaciones que se vayan sucediendo para el paquete instalado. Usaremos el comando \textbf{sudo apt-get install jmeter}, como nos indica la terminal de Ubuntu al intentar ejecutar JMeter sin instalarlo. Hecho esto, deberemos esperar a que termine de instalar cerca de unos 100MiB, ya que instalará dependencias grandes como los paquetes de Java 7, por ejemplo.
		
	Una vez instalado JMeter en Ubuntu Server, podemos lanzarlo simplemente con el comando \textbf{\$ \textit{jmeter}}, y veremos la siguiente interfaz gráfica:
	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.4]{jmeter-interface}
		\caption{Interfaz gráfica del programa Apache JMeter en Ubuntu Server. - Adrián Morente Gabaldón [22/12/2016]}
		\label{figura5}
	\end{figure}
	
	\subsection{Tutorial de Apache JMeter}
	Pasemos ahora a realizar y comentar el tutorial aportado en la web oficial \cite{ab-tutorial}; que consta de las siguientes partes:
	\begin{enumerate}
		\item \textbf{Descripción}: aprenderemos a crear un \emph{``Test Plan''} para testear un sitio web. Crearemos cinco usuarios, que enviarán dos consultas cada uno al servidor HTTP de la página web, dos veces. Es decir: (5 usuarios) x (2 peticiones) x (2 veces) = 20 peticiones al servidor de HTTP; sin embargo, más adelante veremos que son pocas muestras. Aunque en el tutorial se utiliza la página de JMeter para dichas consultas; en nuestro caso usaremos las páginas ofrecidas por nuestras máquinas virtuales. 
		
		\item \textbf{Adición de usuarios}: para empezar, añadiremos un nuevo Plan de Pruebas tal y como indica el tutorial:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-threadgroup}
			\caption{Creación de un nuevo grupo de hebras de ejecución. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura7}
		\end{figure}
		Empezaremos creando 5 usuarios (hilos o hebras) y ajustando el \emph{Periodo de Subida} a 1 segundo, que será el retardo con el que se lanzará cada hebra. Además, pondremos el \emph{Contador del bucle} a 2, que serán las veces que realizaremos las consultas, como mencionamos previamente. Si no quisiéramos un número determinado de ejecuciones, podríamos marcar la casilla \emph{Sin fin} y parar dicha ejecución cuando lo estimásemos oportuno. La configuración del test quedaría tal que así:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-users}
			\caption{Configuración del Plan de Pruebas creado para el tutorial de Apache JMeter. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura6}
		\end{figure}
	
		\item \textbf{Creación de tareas}: ya que tenemos los usuarios (realmente hebras que los simbolizan), pasaremos a crear las tareas que desempeñarán éstos. Para empezar, crearemos un nuevo grupo de tareas del tipo \emph{Valores por defecto para petición HTTP}:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-http}
			\caption{Creación de un nuevo grupo de tareas para el Plan creado anteriormente. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura8}
		\end{figure}
		Una vez creado, dejaremos todos los valores en blanco excepto el correspondiente a \emph{Nombre de Servidor o IP}, a cuyo campo asignaremos el valor de la IP a la que deseamos acceder (la propia de Ubuntu Server, en mi caso). La configuración quedaría de la siguiente forma:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-address}
			\caption{Asignación de la IP a consultar para los usuarios del nuevo Plan de Pruebas de JMeter. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura9}
		\end{figure}
	
		\item \textbf{Soporte para cookies}: la gran mayoría de las páginas web que consultamos hoy en día contienen cookies, que son pequeños depósitos de datos que permanecen almacenados localmente en el cliente para una mejor experiencia en la visualización y ejecución del contenido ofrecido en las webs que visita. En este caso, no añadiremos este soporte ya que las páginas que visualizaremos serán sencillas, estáticas y sin aplicaciones interactivas.
		
		\item \textbf{Adición de peticiones HTTP}: como anticipamos antes, queremos realizar consultas a la página web ofrecida por Ubuntu Server. Para ello, en JMeter deberemos añadir las consultas que deseamos hacer. Para ello, crearemos un nuevo apartado de \emph{Petición HTTP} de la forma que indicada el tutorial; tal que así:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-requests}
			\caption{Creación de peticiones HTTP para las pruebas de Apache JMeter. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura10}
		\end{figure}
		Para rellenar los campos, modificaremos el nombre de la petición, y fijaremos el directorio padre en la ruta de la petición HTTP. Para la segunda consulta, deberemos crear otro archivo \emph{Petición HTTP}. Sin embargo, en el tutorial de JMeter nos sugieren una ruta existente en su servidor, pero como utilizaremos nuestra página web, necesitaremos crear otro archivo \emph{.html} para dicha consulta. Para satisfacer esto, accederemos al directorio del que Apache2 obtiene el contenido a ofrecer en el servidor web, crearemos un nuevo directorio y copiaremos el antiguo index.html como un nuevo archivo, cambiando también su título. Acto seguido, obviamente tendremos que reiniciar el servicio:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-changes}
			\caption{Creación de una segunda página .html para las pruebas de Apache JMeter. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura11}
		\end{figure}
		Para verificar que el servidor web ofrece esta nueva página hagamos un pequeño inciso antes de avanzar:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-newpage}
			\caption{Visualización de los cambios en la nueva página web del servidor. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura12}
		\end{figure}
		Para terminar con la adición de peticiones HTTP, crearemos la segunda y fijaremos la ruta que lleva a la página que acabamos de crear, quedando tal que así:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-lasthttp}
			\caption{Visualización de la segunda petición HTTP a la página web del servidor. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura13}
		\end{figure}
	
		\item \textbf{Visualización de los datos}: para terminar, deberemos crear un \emph{Listener}, que será el encargado de recoger todos los resultados de las mediciones y representarlos de forma gráfica y más visual que una simple tabla de números. Una vez más, creamos dicha \emph{feature} siguiendo las instrucciones aportadas por el tutorial. Definiremos la ubicación donde se almacenará el archivo con dichos resultados y pediremos que nos muestre todos los datos referentes (Nº de muestras, media, mediana, etc.). Para 20 consultas, como dicta el tutorial, obtenemos una gráfica insulsa y sin apenas datos, de forma que no podemos interpretarlos y comentarlos. Dado esto, las realizaremos con 5000 usuarios, (o mejor dicho, hebras). Hecho esto, obtenemos la siguiente gráfica:
		\begin{figure}[H]
			\centering
			\includegraphics[scale=0.4]{jmeter-finalexec}
			\caption{Visualización de la gráfica resultante final del tutorial de JMeter. - Adrián Morente Gabaldón [22/12/2016]}
			\label{figura14}
		\end{figure}
		Para terminar, podemos apreciar que el rendimiento ofrecido es muy bueno, ya que el número de operaciones realizadas por minuto es muy alto. Además, según vemos en el valor de la última consulta, se han realizado todas en tan solo 2 segundos.
	\end{enumerate}

	En cuanto a la comparación con \emph{ab}, podemos ver que la ejecución con JMeter es mucho más lenta; ya que con ab se realizaron 500.000 consultas en 72 segundos, y con JMeter se han empleado 81 segundos para realizar 200.000 consultas.


\section{Programe un benchmark usando el lenguaje que desee. El benchmark debe incluir: 1) Objetivo del benchmark. 2) Métricas (unidades, variables, puntuaciones, etc.). 3) Instrucciones para su uso. 4) Ejemplo de uso analizando los resultados.}
Para realizar el benchmark en lenguaje Ruby me he ayudado de la siguiente documentación oficial \cite{ruby-doc}, que incluye la librería \emph{Benchmark}, de mucha ayuda para realizar operaciones y cálculos de tiempos orientados al benchmarking. El script realizado tiene el siguiente contenido:
\begin{verbatim}
# benchmark.rb

#  Este script se trata de un simple benchmark que utiliza la librería
#Benchmark de Ruby. En él se utilizan arrays de 50 millones de datos en
#los que se escriben y/o leen datos, calculando los tiempos y operando
#con estos tiempos para presentarlos de forma visual.
#  Se utilizan distintos tipos de bucles de Ruby.

require 'benchmark'
include Benchmark

n = 50000000

Benchmark.benchmark(CAPTION, 7, FORMAT, ">total:", ">avg:") do |x|
  #tiempo en recorrer un array con bucle for
    tf = x.report("for:")		{ for i in 1..n; a = "1"; end }
  #tiempo en recorrer un array con bucle times
    tt = x.report("times:")	{ n.times do   ; a = "1"; end }
  #tiempo en recorrer un array con bucle upto
    tu = x.report("upto:")	{ 1.upto(n) do ; a = "1"; end }
  #cálculo del total y la media
    [tf+tt+tu, (tf+tt+tu)/3]
end
\end{verbatim}
Como explico en la descripción dentro del código, el script estresa la CPU creando un array de 50 millones de datos, número hasta el cual cuenta en tres tipos diferentes de bucles existentes en Ruby (\emph{for}, \emph{times} y \emph{upto}). Para terminar, sumamos el tiempo y calculamos la media.
A modo de comparación, he ejecutado dicho benchmark tanto en la terminal de Ubuntu Server como en la terminal de Bash integrada en Windows 10:
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.5]{benchmark-rb}
	\caption{Comparación del tiempo de ejecución del benchmark en Ubuntu Server y en Windows 10. - Adrián Morente Gabaldón [23/12/2016]}
	\label{figura25}
\end{figure}
Aunque en Ubuntu Server tenemos asignados solo 2GiB de RAM de los 8 existentes en el sistema, y 2 cores de CPU de los 8 posibles, podemos apreciar que no hay una diferencia muy notable (apenas 1 segundo).


\bibliography{citas}
\bibliographystyle{plain}
\end{document}
